// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MenuList /> tests should match snapshot 1`] = `
.c1.c1 {
  color: #fff;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 70px;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c0 > a {
  color: #fff;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c0 > *:not(:first-child) {
  margin-left: 10px;
}

<MenuList
  items={
    Array [
      Object {
        "title": "Home",
        "to": "/home",
      },
      Object {
        "title": "FAQ",
        "to": "/faq",
      },
    ]
  }
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  height: 70px;
  flex: 1;

  & > a {
    color: #fff;
    text-decoration: none;
    align-self: center;
  }

  & > *:not(:first-child) {
    margin-left: 10px;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <NavLink
          key="0"
          to="/home"
        >
          <div>
            <Styled(MenuItem)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  && {
    color: #fff;
  }
",
                      ],
                    },
                    "displayName": "Styled(MenuItem)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <MenuItem
                  className="c1"
                >
                  <WithStyles(Typography)
                    className="c1"
                    color="inherit"
                    noWrap={false}
                    variant="h6"
                  />
                </MenuItem>
              </StyledComponent>
            </Styled(MenuItem)>
          </div>
        </NavLink>
        <NavLink
          key="1"
          to="/faq"
        >
          <div>
            <Styled(MenuItem)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  && {
    color: #fff;
  }
",
                      ],
                    },
                    "displayName": "Styled(MenuItem)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <MenuItem
                  className="c1"
                >
                  <WithStyles(Typography)
                    className="c1"
                    color="inherit"
                    noWrap={false}
                    variant="h6"
                  />
                </MenuItem>
              </StyledComponent>
            </Styled(MenuItem)>
          </div>
        </NavLink>
      </div>
    </StyledComponent>
  </styled.div>
</MenuList>
`;
